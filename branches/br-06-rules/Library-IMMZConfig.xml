<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZConfig"/>
  <meta>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"/>
  </meta>
  <text>
    <status value="generated"/><div xmlns="http://www.w3.org/1999/xhtml"><p class="res-header-id"><b>Generated Narrative: Library IMMZConfig</b></p><a name="IMMZConfig"> </a><a name="hcIMMZConfig"> </a><a name="IMMZConfig-en-US"> </a><h2>Parameters</h2><table class="grid"><tr><td>High incidence of TB and/or high leprosy burden</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Polio-endemic country with high risk of spread</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Polio dose scheme</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Country has a high risk of exposure to polio</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>High Coverage of Polio and Risk of Wild Importation</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>In a country where the peak burden of severe Hib disease occurs in young infants</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>In a setting where the greatest disease morbidity and mortality occur later, or whererate reductions of disease are not fully sustained after the routine use of Hib vaccine</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Hib dose scheme</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Hepatitis A endemic country</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Japanese Encephalitis dose scheme</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Country recognizes JE as a health priority</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Pneumococcal dose scheme</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Country is not highly endemic for Hepatitis A</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country is administering a Live attenuated HAV vaccine</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>In a setting with a high disease burden and mortality</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Region recommends Meningococcal vaccination</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Region recommends Cholera vaccination</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Region recommends Typhoid vaccination</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country is administering the TCV vaccine</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country is administering ViPS vaccine</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country is administering an Inactivated HAV vaccine</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>In a setting where the risk of measles among infants &lt; 9 months of age remains high</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country currently has a measles outbreak</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Population is in conflict zones internally displaced populations and refugees</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>In a setting where there is high transmission of Measles</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>In a setting where there is low transmission of Measles</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country has Yellow Fever Endemic</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country recognizes TBE as a priority</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>There is a compelling reason to vaccinate infants with Meningococcal between 3 to 9 months old</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country recognizes Varicella an important public health burden</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country recognizes MUMPS reduction as a public health priority</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Country is using a 3 dose series ROTA product</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class="language-sql">library IMMZConfig

using FHIR version '4.0.1'

define &quot;High incidence of TB and/or high leprosy burden&quot;: true
define &quot;Polio-endemic country with high risk of spread&quot;: true
/*
define &quot;Combined bOPV and IPV Schedule&quot;: true
define &quot;Sequential IPV-OPV Schedule&quot;: true
*/
/*
 * Possible Polio dose schemes are 'combined', 'sequential', or 'ipv'
 */
define &quot;Polio dose scheme&quot;: 'combined'
define &quot;Country has a high risk of exposure to polio&quot;: true
define &quot;High Coverage of Polio and Risk of Wild Importation&quot;: true

define &quot;In a country where the peak burden of severe Hib disease occurs in young infants&quot;:true
define &quot;In a setting where the greatest disease morbidity and mortality occur later, or whererate reductions of disease are not fully sustained after the routine use of Hib vaccine&quot;: true
define &quot;Hib dose scheme&quot;: '1p'
define &quot;Hepatitis A endemic country&quot;: true

define &quot;Japanese Encephalitis dose scheme&quot;: 'attenuated'
/*
define &quot;Country is administering Live recombinant JE antigen&quot;:true
define &quot;Country is administering Live attentuated JE antigen&quot;: true
define &quot;Country is administering Inactivated Vero cell-derived JE antigen&quot;: true
*/
define &quot;Country recognizes JE as a health priority&quot;: true

/*
define &quot;Country is following a 2 dose scheme for Pneumococcal&quot;: true
define &quot;Country is following a 3 dose scheme for Pneumococcal&quot;: true
*/
define &quot;Pneumococcal dose scheme&quot;: '2p+1'
define &quot;Country is not highly endemic for Hepatitis A&quot;:true
define &quot;Country is administering a Live attenuated HAV vaccine&quot;: true
define &quot;In a setting with a high disease burden and mortality&quot;: true

define &quot;Region recommends Meningococcal vaccination&quot;: true
define &quot;Region recommends Cholera vaccination&quot;: true
define &quot;Region recommends Typhoid vaccination&quot;: true
define &quot;Country is administering the TCV vaccine&quot;: true
define &quot;Country is administering ViPS vaccine&quot;: true
define &quot;Country is administering an Inactivated HAV vaccine&quot;: true
define &quot;In a setting where the risk of measles among infants &lt; 9 months of age remains high&quot;: false
define &quot;Country currently has a measles outbreak&quot;: false
define &quot;Population is in conflict zones internally displaced populations and refugees&quot;: false
define &quot;In a setting where there is high transmission of Measles&quot;:false
define &quot;In a setting where there is low transmission of Measles&quot;:false

define &quot;Country has Yellow Fever Endemic&quot;: true
define &quot;Country recognizes TBE as a priority&quot;: true

define &quot;There is a compelling reason to vaccinate infants with Meningococcal between 3 to 9 months old&quot;: true
define &quot;Country recognizes Varicella an important public health burden&quot;: true
define &quot;Country recognizes MUMPS reduction as a public health priority&quot;: true
define &quot;Country is using a 3 dose series ROTA product&quot;: true
// TODO: 
//define &quot;bOPV and IPV Schedule&quot;:
//	'combined'
	//'sequential';


</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 17Kb )</p><p><code>Content not shown - (</code><code>application/elm+json</code>, size = 28Kb )</p></div>
  </text>
  <extension url="http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability">
    <valueCode value="computable"/>
  </extension>
  <url value="http://smart.who.int/example-workshop/Library/IMMZConfig"/>
  <version value="0.1.0"/>
  <name value="IMMZConfig"/>
  <title value="IMMZConfig"/>
  <status value="draft"/>
  <experimental value="true"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2024-12-02T20:32:13+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <description value="This library defines configuration points for the Immunization CPG"/>
  <parameter>
    <name value="High incidence of TB and/or high leprosy burden"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Polio-endemic country with high risk of spread"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Polio dose scheme"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Country has a high risk of exposure to polio"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="High Coverage of Polio and Risk of Wild Importation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="In a country where the peak burden of severe Hib disease occurs in young infants"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="In a setting where the greatest disease morbidity and mortality occur later, or whererate reductions of disease are not fully sustained after the routine use of Hib vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Hib dose scheme"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Hepatitis A endemic country"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Japanese Encephalitis dose scheme"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Country recognizes JE as a health priority"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Pneumococcal dose scheme"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Country is not highly endemic for Hepatitis A"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country is administering a Live attenuated HAV vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="In a setting with a high disease burden and mortality"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Region recommends Meningococcal vaccination"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Region recommends Cholera vaccination"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Region recommends Typhoid vaccination"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country is administering the TCV vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country is administering ViPS vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country is administering an Inactivated HAV vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="In a setting where the risk of measles among infants &lt; 9 months of age remains high"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country currently has a measles outbreak"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Population is in conflict zones internally displaced populations and refugees"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="In a setting where there is high transmission of Measles"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="In a setting where there is low transmission of Measles"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country has Yellow Fever Endemic"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country recognizes TBE as a priority"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="There is a compelling reason to vaccinate infants with Meningococcal between 3 to 9 months old"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country recognizes Varicella an important public health burden"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country recognizes MUMPS reduction as a public health priority"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Country is using a 3 dose series ROTA product"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <content>
    <contentType value="text/cql"/>
    <data value="bGlicmFyeSBJTU1aQ29uZmlnCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwoKZGVmaW5lICJIaWdoIGluY2lkZW5jZSBvZiBUQiBhbmQvb3IgaGlnaCBsZXByb3N5IGJ1cmRlbiI6IHRydWUKZGVmaW5lICJQb2xpby1lbmRlbWljIGNvdW50cnkgd2l0aCBoaWdoIHJpc2sgb2Ygc3ByZWFkIjogdHJ1ZQovKgpkZWZpbmUgIkNvbWJpbmVkIGJPUFYgYW5kIElQViBTY2hlZHVsZSI6IHRydWUKZGVmaW5lICJTZXF1ZW50aWFsIElQVi1PUFYgU2NoZWR1bGUiOiB0cnVlCiovCi8qCiAqIFBvc3NpYmxlIFBvbGlvIGRvc2Ugc2NoZW1lcyBhcmUgJ2NvbWJpbmVkJywgJ3NlcXVlbnRpYWwnLCBvciAnaXB2JwogKi8KZGVmaW5lICJQb2xpbyBkb3NlIHNjaGVtZSI6ICdjb21iaW5lZCcKZGVmaW5lICJDb3VudHJ5IGhhcyBhIGhpZ2ggcmlzayBvZiBleHBvc3VyZSB0byBwb2xpbyI6IHRydWUKZGVmaW5lICJIaWdoIENvdmVyYWdlIG9mIFBvbGlvIGFuZCBSaXNrIG9mIFdpbGQgSW1wb3J0YXRpb24iOiB0cnVlCgpkZWZpbmUgIkluIGEgY291bnRyeSB3aGVyZSB0aGUgcGVhayBidXJkZW4gb2Ygc2V2ZXJlIEhpYiBkaXNlYXNlIG9jY3VycyBpbiB5b3VuZyBpbmZhbnRzIjp0cnVlCmRlZmluZSAiSW4gYSBzZXR0aW5nIHdoZXJlIHRoZSBncmVhdGVzdCBkaXNlYXNlIG1vcmJpZGl0eSBhbmQgbW9ydGFsaXR5IG9jY3VyIGxhdGVyLCBvciB3aGVyZXJhdGUgcmVkdWN0aW9ucyBvZiBkaXNlYXNlIGFyZSBub3QgZnVsbHkgc3VzdGFpbmVkIGFmdGVyIHRoZSByb3V0aW5lIHVzZSBvZiBIaWIgdmFjY2luZSI6IHRydWUKZGVmaW5lICJIaWIgZG9zZSBzY2hlbWUiOiAnMXAnCmRlZmluZSAiSGVwYXRpdGlzIEEgZW5kZW1pYyBjb3VudHJ5IjogdHJ1ZQoKZGVmaW5lICJKYXBhbmVzZSBFbmNlcGhhbGl0aXMgZG9zZSBzY2hlbWUiOiAnYXR0ZW51YXRlZCcKLyoKZGVmaW5lICJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgTGl2ZSByZWNvbWJpbmFudCBKRSBhbnRpZ2VuIjp0cnVlCmRlZmluZSAiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIExpdmUgYXR0ZW50dWF0ZWQgSkUgYW50aWdlbiI6IHRydWUKZGVmaW5lICJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgSW5hY3RpdmF0ZWQgVmVybyBjZWxsLWRlcml2ZWQgSkUgYW50aWdlbiI6IHRydWUKKi8KZGVmaW5lICJDb3VudHJ5IHJlY29nbml6ZXMgSkUgYXMgYSBoZWFsdGggcHJpb3JpdHkiOiB0cnVlCgovKgpkZWZpbmUgIkNvdW50cnkgaXMgZm9sbG93aW5nIGEgMiBkb3NlIHNjaGVtZSBmb3IgUG5ldW1vY29jY2FsIjogdHJ1ZQpkZWZpbmUgIkNvdW50cnkgaXMgZm9sbG93aW5nIGEgMyBkb3NlIHNjaGVtZSBmb3IgUG5ldW1vY29jY2FsIjogdHJ1ZQoqLwpkZWZpbmUgIlBuZXVtb2NvY2NhbCBkb3NlIHNjaGVtZSI6ICcycCsxJwpkZWZpbmUgIkNvdW50cnkgaXMgbm90IGhpZ2hseSBlbmRlbWljIGZvciBIZXBhdGl0aXMgQSI6dHJ1ZQpkZWZpbmUgIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyBhIExpdmUgYXR0ZW51YXRlZCBIQVYgdmFjY2luZSI6IHRydWUKZGVmaW5lICJJbiBhIHNldHRpbmcgd2l0aCBhIGhpZ2ggZGlzZWFzZSBidXJkZW4gYW5kIG1vcnRhbGl0eSI6IHRydWUKCmRlZmluZSAiUmVnaW9uIHJlY29tbWVuZHMgTWVuaW5nb2NvY2NhbCB2YWNjaW5hdGlvbiI6IHRydWUKZGVmaW5lICJSZWdpb24gcmVjb21tZW5kcyBDaG9sZXJhIHZhY2NpbmF0aW9uIjogdHJ1ZQpkZWZpbmUgIlJlZ2lvbiByZWNvbW1lbmRzIFR5cGhvaWQgdmFjY2luYXRpb24iOiB0cnVlCmRlZmluZSAiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIHRoZSBUQ1YgdmFjY2luZSI6IHRydWUKZGVmaW5lICJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgVmlQUyB2YWNjaW5lIjogdHJ1ZQpkZWZpbmUgIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyBhbiBJbmFjdGl2YXRlZCBIQVYgdmFjY2luZSI6IHRydWUKZGVmaW5lICJJbiBhIHNldHRpbmcgd2hlcmUgdGhlIHJpc2sgb2YgbWVhc2xlcyBhbW9uZyBpbmZhbnRzIDwgOSBtb250aHMgb2YgYWdlIHJlbWFpbnMgaGlnaCI6IGZhbHNlCmRlZmluZSAiQ291bnRyeSBjdXJyZW50bHkgaGFzIGEgbWVhc2xlcyBvdXRicmVhayI6IGZhbHNlCmRlZmluZSAiUG9wdWxhdGlvbiBpcyBpbiBjb25mbGljdCB6b25lcyBpbnRlcm5hbGx5IGRpc3BsYWNlZCBwb3B1bGF0aW9ucyBhbmQgcmVmdWdlZXMiOiBmYWxzZQpkZWZpbmUgIkluIGEgc2V0dGluZyB3aGVyZSB0aGVyZSBpcyBoaWdoIHRyYW5zbWlzc2lvbiBvZiBNZWFzbGVzIjpmYWxzZQpkZWZpbmUgIkluIGEgc2V0dGluZyB3aGVyZSB0aGVyZSBpcyBsb3cgdHJhbnNtaXNzaW9uIG9mIE1lYXNsZXMiOmZhbHNlCgpkZWZpbmUgIkNvdW50cnkgaGFzIFllbGxvdyBGZXZlciBFbmRlbWljIjogdHJ1ZQpkZWZpbmUgIkNvdW50cnkgcmVjb2duaXplcyBUQkUgYXMgYSBwcmlvcml0eSI6IHRydWUKCmRlZmluZSAiVGhlcmUgaXMgYSBjb21wZWxsaW5nIHJlYXNvbiB0byB2YWNjaW5hdGUgaW5mYW50cyB3aXRoIE1lbmluZ29jb2NjYWwgYmV0d2VlbiAzIHRvIDkgbW9udGhzIG9sZCI6IHRydWUKZGVmaW5lICJDb3VudHJ5IHJlY29nbml6ZXMgVmFyaWNlbGxhIGFuIGltcG9ydGFudCBwdWJsaWMgaGVhbHRoIGJ1cmRlbiI6IHRydWUKZGVmaW5lICJDb3VudHJ5IHJlY29nbml6ZXMgTVVNUFMgcmVkdWN0aW9uIGFzIGEgcHVibGljIGhlYWx0aCBwcmlvcml0eSI6IHRydWUKZGVmaW5lICJDb3VudHJ5IGlzIHVzaW5nIGEgMyBkb3NlIHNlcmllcyBST1RBIHByb2R1Y3QiOiB0cnVlCi8vIFRPRE86IAovL2RlZmluZSAiYk9QViBhbmQgSVBWIFNjaGVkdWxlIjoKLy8JJ2NvbWJpbmVkJwoJLy8nc2VxdWVudGlhbCc7CgoK"/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
    <data value=""/>
  </content>
  <content>
    <contentType value="application/elm+json"/>
    <data value="ewogICAibGlicmFyeSIgOiB7CiAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAidHJhbnNsYXRvck9wdGlvbnMiIDogIkVuYWJsZUFubm90YXRpb25zLEVuYWJsZUxvY2F0b3JzLERpc2FibGVMaXN0RGVtb3Rpb24sRGlzYWJsZUxpc3RQcm9tb3Rpb24iLAogICAgICAgICAic2lnbmF0dXJlTGV2ZWwiIDogIk92ZXJsb2FkcyIsCiAgICAgICAgICJ0eXBlIiA6ICJDcWxUb0VsbUluZm8iCiAgICAgIH0sIHsKICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICJyIiA6ICI2NSIsCiAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwibGlicmFyeSBJTU1aQ29uZmlnIiBdCiAgICAgICAgICAgIH0gXQogICAgICAgICB9CiAgICAgIH0gXSwKICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAiaWQiIDogIklNTVpDb25maWciLAogICAgICAgICAic3lzdGVtIiA6ICJodHRwOi8vc21hcnQud2hvLmludC9leGFtcGxlLXdvcmtzaG9wIgogICAgICB9LAogICAgICAic2NoZW1hSWRlbnRpZmllciIgOiB7CiAgICAgICAgICJpZCIgOiAidXJuOmhsNy1vcmc6ZWxtIiwKICAgICAgICAgInZlcnNpb24iIDogInIxIgogICAgICB9LAogICAgICAidXNpbmdzIiA6IHsKICAgICAgICAgImRlZiIgOiBbIHsKICAgICAgICAgICAgImxvY2FsSWRlbnRpZmllciIgOiAiU3lzdGVtIiwKICAgICAgICAgICAgInVyaSIgOiAidXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIgogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIxIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjM6MS0zOjI2IiwKICAgICAgICAgICAgImxvY2FsSWRlbnRpZmllciIgOiAiRkhJUiIsCiAgICAgICAgICAgICJ1cmkiIDogImh0dHA6Ly9obDcub3JnL2ZoaXIiLAogICAgICAgICAgICAidmVyc2lvbiIgOiAiNC4wLjEiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIxIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJ1c2luZyAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIkZISVIiIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiB2ZXJzaW9uICc0LjAuMSciIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdCiAgICAgICAgIH0gXQogICAgICB9LAogICAgICAic3RhdGVtZW50cyIgOiB7CiAgICAgICAgICJkZWYiIDogWyB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIzIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjU6MS01OjYyIiwKICAgICAgICAgICAgIm5hbWUiIDogIkhpZ2ggaW5jaWRlbmNlIG9mIFRCIGFuZC9vciBoaWdoIGxlcHJvc3kgYnVyZGVuIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjMiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjIiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiSGlnaCBpbmNpZGVuY2Ugb2YgVEIgYW5kL29yIGhpZ2ggbGVwcm9zeSBidXJkZW5cIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjIiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNTo1OS01OjYyIiwKICAgICAgICAgICAgICAgInZhbHVlVHlwZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Cb29sZWFuIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJ0cnVlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNSIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI2OjEtNjo2MSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJQb2xpby1lbmRlbWljIGNvdW50cnkgd2l0aCBoaWdoIHJpc2sgb2Ygc3ByZWFkIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjUiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjQiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiUG9saW8tZW5kZW1pYyBjb3VudHJ5IHdpdGggaGlnaCByaXNrIG9mIHNwcmVhZFwiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI2OjU4LTY6NjEiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI3IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjE0OjEtMTQ6MzgiLAogICAgICAgICAgICAibmFtZSIgOiAiUG9saW8gZG9zZSBzY2hlbWUiLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiLypcbmRlZmluZSBcIkNvbWJpbmVkIGJPUFYgYW5kIElQViBTY2hlZHVsZVwiOiB0cnVlXG5kZWZpbmUgXCJTZXF1ZW50aWFsIElQVi1PUFYgU2NoZWR1bGVcIjogdHJ1ZVxuKi9cbi8qXG4gKiBQb3NzaWJsZSBQb2xpbyBkb3NlIHNjaGVtZXMgYXJlICdjb21iaW5lZCcsICdzZXF1ZW50aWFsJywgb3IgJ2lwdidcbiAqL1xuIiwiZGVmaW5lICIsIlwiUG9saW8gZG9zZSBzY2hlbWVcIiIsIjogIiBdCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjYiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIidjb21iaW5lZCciIF0KICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIxNDoyOS0xNDozOCIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9U3RyaW5nIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJjb21iaW5lZCIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjkiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMTU6MS0xNTo1OSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDb3VudHJ5IGhhcyBhIGhpZ2ggcmlzayBvZiBleHBvc3VyZSB0byBwb2xpbyIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI5IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI4IiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIkNvdW50cnkgaGFzIGEgaGlnaCByaXNrIG9mIGV4cG9zdXJlIHRvIHBvbGlvXCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI4IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjE1OjU2LTE1OjU5IiwKICAgICAgICAgICAgICAgInZhbHVlVHlwZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Cb29sZWFuIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJ0cnVlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMTEiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMTY6MS0xNjo2NiIsCiAgICAgICAgICAgICJuYW1lIiA6ICJIaWdoIENvdmVyYWdlIG9mIFBvbGlvIGFuZCBSaXNrIG9mIFdpbGQgSW1wb3J0YXRpb24iLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMTEiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjEwIiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIkhpZ2ggQ292ZXJhZ2Ugb2YgUG9saW8gYW5kIFJpc2sgb2YgV2lsZCBJbXBvcnRhdGlvblwiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMTAiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiMTY6NjMtMTY6NjYiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIxMyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICIxODoxLTE4Ojk0IiwKICAgICAgICAgICAgIm5hbWUiIDogIkluIGEgY291bnRyeSB3aGVyZSB0aGUgcGVhayBidXJkZW4gb2Ygc2V2ZXJlIEhpYiBkaXNlYXNlIG9jY3VycyBpbiB5b3VuZyBpbmZhbnRzIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjEzIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIxMiIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJJbiBhIGNvdW50cnkgd2hlcmUgdGhlIHBlYWsgYnVyZGVuIG9mIHNldmVyZSBIaWIgZGlzZWFzZSBvY2N1cnMgaW4geW91bmcgaW5mYW50c1wiIiwiOiIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIxMiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIxODo5MS0xODo5NCIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjE1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjE5OjEtMTk6MTg3IiwKICAgICAgICAgICAgIm5hbWUiIDogIkluIGEgc2V0dGluZyB3aGVyZSB0aGUgZ3JlYXRlc3QgZGlzZWFzZSBtb3JiaWRpdHkgYW5kIG1vcnRhbGl0eSBvY2N1ciBsYXRlciwgb3Igd2hlcmVyYXRlIHJlZHVjdGlvbnMgb2YgZGlzZWFzZSBhcmUgbm90IGZ1bGx5IHN1c3RhaW5lZCBhZnRlciB0aGUgcm91dGluZSB1c2Ugb2YgSGliIHZhY2NpbmUiLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMTUiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjE0IiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIkluIGEgc2V0dGluZyB3aGVyZSB0aGUgZ3JlYXRlc3QgZGlzZWFzZSBtb3JiaWRpdHkgYW5kIG1vcnRhbGl0eSBvY2N1ciBsYXRlciwgb3Igd2hlcmVyYXRlIHJlZHVjdGlvbnMgb2YgZGlzZWFzZSBhcmUgbm90IGZ1bGx5IHN1c3RhaW5lZCBhZnRlciB0aGUgcm91dGluZSB1c2Ugb2YgSGliIHZhY2NpbmVcIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjE0IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjE5OjE4NC0xOToxODciLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIxNyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICIyMDoxLTIwOjMwIiwKICAgICAgICAgICAgIm5hbWUiIDogIkhpYiBkb3NlIHNjaGVtZSIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIxNyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiSGliIGRvc2Ugc2NoZW1lXCIiLCI6ICIgXQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIxNiIsCiAgICAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiJzFwJyIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIxNiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIyMDoyNy0yMDozMCIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9U3RyaW5nIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICIxcCIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjE5IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjIxOjEtMjE6NDIiLAogICAgICAgICAgICAibmFtZSIgOiAiSGVwYXRpdGlzIEEgZW5kZW1pYyBjb3VudHJ5IiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjE5IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJIZXBhdGl0aXMgQSBlbmRlbWljIGNvdW50cnlcIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjE4IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjIxOjM5LTIxOjQyIiwKICAgICAgICAgICAgICAgInZhbHVlVHlwZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Cb29sZWFuIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJ0cnVlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMjEiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMjM6MS0yMzo1NiIsCiAgICAgICAgICAgICJuYW1lIiA6ICJKYXBhbmVzZSBFbmNlcGhhbGl0aXMgZG9zZSBzY2hlbWUiLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMjEiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIkphcGFuZXNlIEVuY2VwaGFsaXRpcyBkb3NlIHNjaGVtZVwiIiwiOiAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMjAiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIidhdHRlbnVhdGVkJyIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIyMCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIyMzo0NS0yMzo1NiIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9U3RyaW5nIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJhdHRlbnVhdGVkIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMjMiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMjk6MS0yOTo1NyIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDb3VudHJ5IHJlY29nbml6ZXMgSkUgYXMgYSBoZWFsdGggcHJpb3JpdHkiLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMjMiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjIyIiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIi8qXG5kZWZpbmUgXCJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgTGl2ZSByZWNvbWJpbmFudCBKRSBhbnRpZ2VuXCI6dHJ1ZVxuZGVmaW5lIFwiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIExpdmUgYXR0ZW50dWF0ZWQgSkUgYW50aWdlblwiOiB0cnVlXG5kZWZpbmUgXCJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgSW5hY3RpdmF0ZWQgVmVybyBjZWxsLWRlcml2ZWQgSkUgYW50aWdlblwiOiB0cnVlXG4qL1xuIiwiZGVmaW5lICIsIlwiQ291bnRyeSByZWNvZ25pemVzIEpFIGFzIGEgaGVhbHRoIHByaW9yaXR5XCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIyMiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIyOTo1NC0yOTo1NyIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjI1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjM1OjEtMzU6NDEiLAogICAgICAgICAgICAibmFtZSIgOiAiUG5ldW1vY29jY2FsIGRvc2Ugc2NoZW1lIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjI1IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIvKlxuZGVmaW5lIFwiQ291bnRyeSBpcyBmb2xsb3dpbmcgYSAyIGRvc2Ugc2NoZW1lIGZvciBQbmV1bW9jb2NjYWxcIjogdHJ1ZVxuZGVmaW5lIFwiQ291bnRyeSBpcyBmb2xsb3dpbmcgYSAzIGRvc2Ugc2NoZW1lIGZvciBQbmV1bW9jb2NjYWxcIjogdHJ1ZVxuKi9cbiIsImRlZmluZSAiLCJcIlBuZXVtb2NvY2NhbCBkb3NlIHNjaGVtZVwiIiwiOiAiIF0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMjQiLAogICAgICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIicycCsxJyIgXQogICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIyNCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIzNTozNi0zNTo0MSIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9U3RyaW5nIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICIycCsxIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMjciLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMzY6MS0zNjo1OSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDb3VudHJ5IGlzIG5vdCBoaWdobHkgZW5kZW1pYyBmb3IgSGVwYXRpdGlzIEEiLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMjciLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjI2IiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIkNvdW50cnkgaXMgbm90IGhpZ2hseSBlbmRlbWljIGZvciBIZXBhdGl0aXMgQVwiIiwiOiIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIyNiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICIzNjo1Ni0zNjo1OSIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjI5IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjM3OjEtMzc6NjkiLAogICAgICAgICAgICAibmFtZSIgOiAiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIGEgTGl2ZSBhdHRlbnVhdGVkIEhBViB2YWNjaW5lIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjI5IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIyOCIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgYSBMaXZlIGF0dGVudWF0ZWQgSEFWIHZhY2NpbmVcIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjI4IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjM3OjY2LTM3OjY5IiwKICAgICAgICAgICAgICAgInZhbHVlVHlwZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Cb29sZWFuIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJ0cnVlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMzEiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiMzg6MS0zODo2OCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJJbiBhIHNldHRpbmcgd2l0aCBhIGhpZ2ggZGlzZWFzZSBidXJkZW4gYW5kIG1vcnRhbGl0eSIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIzMSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMzAiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiSW4gYSBzZXR0aW5nIHdpdGggYSBoaWdoIGRpc2Vhc2UgYnVyZGVuIGFuZCBtb3J0YWxpdHlcIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjMwIiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjM4OjY1LTM4OjY4IiwKICAgICAgICAgICAgICAgInZhbHVlVHlwZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Cb29sZWFuIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJ0cnVlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMzMiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNDA6MS00MDo1OCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJSZWdpb24gcmVjb21tZW5kcyBNZW5pbmdvY29jY2FsIHZhY2NpbmF0aW9uIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjMzIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIzMiIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJSZWdpb24gcmVjb21tZW5kcyBNZW5pbmdvY29jY2FsIHZhY2NpbmF0aW9uXCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIzMiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0MDo1NS00MDo1OCIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjM1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjQxOjEtNDE6NTIiLAogICAgICAgICAgICAibmFtZSIgOiAiUmVnaW9uIHJlY29tbWVuZHMgQ2hvbGVyYSB2YWNjaW5hdGlvbiIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICIzNSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiMzQiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiUmVnaW9uIHJlY29tbWVuZHMgQ2hvbGVyYSB2YWNjaW5hdGlvblwiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiMzQiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDE6NDktNDE6NTIiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICIzNyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0MjoxLTQyOjUyIiwKICAgICAgICAgICAgIm5hbWUiIDogIlJlZ2lvbiByZWNvbW1lbmRzIFR5cGhvaWQgdmFjY2luYXRpb24iLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiMzciLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjM2IiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIlJlZ2lvbiByZWNvbW1lbmRzIFR5cGhvaWQgdmFjY2luYXRpb25cIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjM2IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjQyOjQ5LTQyOjUyIiwKICAgICAgICAgICAgICAgInZhbHVlVHlwZSIgOiAie3VybjpobDctb3JnOmVsbS10eXBlczpyMX1Cb29sZWFuIiwKICAgICAgICAgICAgICAgInZhbHVlIiA6ICJ0cnVlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiMzkiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNDM6MS00Mzo1NSIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgdGhlIFRDViB2YWNjaW5lIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjM5IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICIzOCIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgdGhlIFRDViB2YWNjaW5lXCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICIzOCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0Mzo1Mi00Mzo1NSIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjQxIiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjQ0OjEtNDQ6NTIiLAogICAgICAgICAgICAibmFtZSIgOiAiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIFZpUFMgdmFjY2luZSIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI0MSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNDAiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIFZpUFMgdmFjY2luZVwiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNDAiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDQ6NDktNDQ6NTIiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI0MyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0NToxLTQ1OjY2IiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyBhbiBJbmFjdGl2YXRlZCBIQVYgdmFjY2luZSIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI0MyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNDIiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIGFuIEluYWN0aXZhdGVkIEhBViB2YWNjaW5lXCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI0MiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0NTo2My00NTo2NiIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjQ1IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjQ2OjEtNDY6OTkiLAogICAgICAgICAgICAibmFtZSIgOiAiSW4gYSBzZXR0aW5nIHdoZXJlIHRoZSByaXNrIG9mIG1lYXNsZXMgYW1vbmcgaW5mYW50cyA8IDkgbW9udGhzIG9mIGFnZSByZW1haW5zIGhpZ2giLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNDUiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjQ0IiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIkluIGEgc2V0dGluZyB3aGVyZSB0aGUgcmlzayBvZiBtZWFzbGVzIGFtb25nIGluZmFudHMgPCA5IG1vbnRocyBvZiBhZ2UgcmVtYWlucyBoaWdoXCIiLCI6ICIsImZhbHNlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNDQiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDY6OTUtNDY6OTkiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogImZhbHNlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNDciLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNDc6MS00Nzo1NiIsCiAgICAgICAgICAgICJuYW1lIiA6ICJDb3VudHJ5IGN1cnJlbnRseSBoYXMgYSBtZWFzbGVzIG91dGJyZWFrIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjQ3IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI0NiIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJDb3VudHJ5IGN1cnJlbnRseSBoYXMgYSBtZWFzbGVzIG91dGJyZWFrXCIiLCI6ICIsImZhbHNlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNDYiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDc6NTItNDc6NTYiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogImZhbHNlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNDkiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNDg6MS00ODo5MyIsCiAgICAgICAgICAgICJuYW1lIiA6ICJQb3B1bGF0aW9uIGlzIGluIGNvbmZsaWN0IHpvbmVzIGludGVybmFsbHkgZGlzcGxhY2VkIHBvcHVsYXRpb25zIGFuZCByZWZ1Z2VlcyIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI0OSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNDgiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiUG9wdWxhdGlvbiBpcyBpbiBjb25mbGljdCB6b25lcyBpbnRlcm5hbGx5IGRpc3BsYWNlZCBwb3B1bGF0aW9ucyBhbmQgcmVmdWdlZXNcIiIsIjogIiwiZmFsc2UiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI0OCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0ODo4OS00ODo5MyIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiZmFsc2UiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI1MSIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI0OToxLTQ5OjcxIiwKICAgICAgICAgICAgIm5hbWUiIDogIkluIGEgc2V0dGluZyB3aGVyZSB0aGVyZSBpcyBoaWdoIHRyYW5zbWlzc2lvbiBvZiBNZWFzbGVzIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjUxIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI1MCIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJJbiBhIHNldHRpbmcgd2hlcmUgdGhlcmUgaXMgaGlnaCB0cmFuc21pc3Npb24gb2YgTWVhc2xlc1wiIiwiOiIsImZhbHNlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNTAiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNDk6NjctNDk6NzEiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogImZhbHNlIiwKICAgICAgICAgICAgICAgInR5cGUiIDogIkxpdGVyYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgfSwgewogICAgICAgICAgICAibG9jYWxJZCIgOiAiNTMiLAogICAgICAgICAgICAibG9jYXRvciIgOiAiNTA6MS01MDo3MCIsCiAgICAgICAgICAgICJuYW1lIiA6ICJJbiBhIHNldHRpbmcgd2hlcmUgdGhlcmUgaXMgbG93IHRyYW5zbWlzc2lvbiBvZiBNZWFzbGVzIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjUzIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI1MiIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJJbiBhIHNldHRpbmcgd2hlcmUgdGhlcmUgaXMgbG93IHRyYW5zbWlzc2lvbiBvZiBNZWFzbGVzXCIiLCI6IiwiZmFsc2UiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI1MiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1MDo2Ni01MDo3MCIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiZmFsc2UiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI1NSIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1MjoxLTUyOjQ3IiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvdW50cnkgaGFzIFllbGxvdyBGZXZlciBFbmRlbWljIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjU1IiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI1NCIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJDb3VudHJ5IGhhcyBZZWxsb3cgRmV2ZXIgRW5kZW1pY1wiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNTQiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNTI6NDQtNTI6NDciLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI1NyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1MzoxLTUzOjUxIiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvdW50cnkgcmVjb2duaXplcyBUQkUgYXMgYSBwcmlvcml0eSIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI1NyIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNTYiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiQ291bnRyeSByZWNvZ25pemVzIFRCRSBhcyBhIHByaW9yaXR5XCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI1NiIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1Mzo0OC01Mzo1MSIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0sIHsKICAgICAgICAgICAgImxvY2FsSWQiIDogIjU5IiwKICAgICAgICAgICAgImxvY2F0b3IiIDogIjU1OjEtNTU6MTA5IiwKICAgICAgICAgICAgIm5hbWUiIDogIlRoZXJlIGlzIGEgY29tcGVsbGluZyByZWFzb24gdG8gdmFjY2luYXRlIGluZmFudHMgd2l0aCBNZW5pbmdvY29jY2FsIGJldHdlZW4gMyB0byA5IG1vbnRocyBvbGQiLAogICAgICAgICAgICAiY29udGV4dCIgOiAiVW5maWx0ZXJlZCIsCiAgICAgICAgICAgICJhY2Nlc3NMZXZlbCIgOiAiUHVibGljIiwKICAgICAgICAgICAgImFubm90YXRpb24iIDogWyB7CiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJBbm5vdGF0aW9uIiwKICAgICAgICAgICAgICAgInMiIDogewogICAgICAgICAgICAgICAgICAiciIgOiAiNTkiLAogICAgICAgICAgICAgICAgICAicyIgOiBbIHsKICAgICAgICAgICAgICAgICAgICAgInIiIDogIjU4IiwKICAgICAgICAgICAgICAgICAgICAgInZhbHVlIiA6IFsgIiIsImRlZmluZSAiLCJcIlRoZXJlIGlzIGEgY29tcGVsbGluZyByZWFzb24gdG8gdmFjY2luYXRlIGluZmFudHMgd2l0aCBNZW5pbmdvY29jY2FsIGJldHdlZW4gMyB0byA5IG1vbnRocyBvbGRcIiIsIjogIiwidHJ1ZSIgXQogICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0sCiAgICAgICAgICAgICJleHByZXNzaW9uIiA6IHsKICAgICAgICAgICAgICAgImxvY2FsSWQiIDogIjU4IiwKICAgICAgICAgICAgICAgImxvY2F0b3IiIDogIjU1OjEwNi01NToxMDkiLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI2MSIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1NjoxLTU2Ojc3IiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvdW50cnkgcmVjb2duaXplcyBWYXJpY2VsbGEgYW4gaW1wb3J0YW50IHB1YmxpYyBoZWFsdGggYnVyZGVuIiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjYxIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI2MCIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJDb3VudHJ5IHJlY29nbml6ZXMgVmFyaWNlbGxhIGFuIGltcG9ydGFudCBwdWJsaWMgaGVhbHRoIGJ1cmRlblwiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNjAiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNTY6NzQtNTY6NzciLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI2MyIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1NzoxLTU3Ojc3IiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvdW50cnkgcmVjb2duaXplcyBNVU1QUyByZWR1Y3Rpb24gYXMgYSBwdWJsaWMgaGVhbHRoIHByaW9yaXR5IiwKICAgICAgICAgICAgImNvbnRleHQiIDogIlVuZmlsdGVyZWQiLAogICAgICAgICAgICAiYWNjZXNzTGV2ZWwiIDogIlB1YmxpYyIsCiAgICAgICAgICAgICJhbm5vdGF0aW9uIiA6IFsgewogICAgICAgICAgICAgICAidHlwZSIgOiAiQW5ub3RhdGlvbiIsCiAgICAgICAgICAgICAgICJzIiA6IHsKICAgICAgICAgICAgICAgICAgInIiIDogIjYzIiwKICAgICAgICAgICAgICAgICAgInMiIDogWyB7CiAgICAgICAgICAgICAgICAgICAgICJyIiA6ICI2MiIsCiAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiBbICIiLCJkZWZpbmUgIiwiXCJDb3VudHJ5IHJlY29nbml6ZXMgTVVNUFMgcmVkdWN0aW9uIGFzIGEgcHVibGljIGhlYWx0aCBwcmlvcml0eVwiIiwiOiAiLCJ0cnVlIiBdCiAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSwKICAgICAgICAgICAgImV4cHJlc3Npb24iIDogewogICAgICAgICAgICAgICAibG9jYWxJZCIgOiAiNjIiLAogICAgICAgICAgICAgICAibG9jYXRvciIgOiAiNTc6NzQtNTc6NzciLAogICAgICAgICAgICAgICAidmFsdWVUeXBlIiA6ICJ7dXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxfUJvb2xlYW4iLAogICAgICAgICAgICAgICAidmFsdWUiIDogInRydWUiLAogICAgICAgICAgICAgICAidHlwZSIgOiAiTGl0ZXJhbCIKICAgICAgICAgICAgfQogICAgICAgICB9LCB7CiAgICAgICAgICAgICJsb2NhbElkIiA6ICI2NSIsCiAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1ODoxLTU4OjYwIiwKICAgICAgICAgICAgIm5hbWUiIDogIkNvdW50cnkgaXMgdXNpbmcgYSAzIGRvc2Ugc2VyaWVzIFJPVEEgcHJvZHVjdCIsCiAgICAgICAgICAgICJjb250ZXh0IiA6ICJVbmZpbHRlcmVkIiwKICAgICAgICAgICAgImFjY2Vzc0xldmVsIiA6ICJQdWJsaWMiLAogICAgICAgICAgICAiYW5ub3RhdGlvbiIgOiBbIHsKICAgICAgICAgICAgICAgInR5cGUiIDogIkFubm90YXRpb24iLAogICAgICAgICAgICAgICAicyIgOiB7CiAgICAgICAgICAgICAgICAgICJyIiA6ICI2NSIsCiAgICAgICAgICAgICAgICAgICJzIiA6IFsgewogICAgICAgICAgICAgICAgICAgICAiciIgOiAiNjQiLAogICAgICAgICAgICAgICAgICAgICAidmFsdWUiIDogWyAiIiwiZGVmaW5lICIsIlwiQ291bnRyeSBpcyB1c2luZyBhIDMgZG9zZSBzZXJpZXMgUk9UQSBwcm9kdWN0XCIiLCI6ICIsInRydWUiIF0KICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdLAogICAgICAgICAgICAiZXhwcmVzc2lvbiIgOiB7CiAgICAgICAgICAgICAgICJsb2NhbElkIiA6ICI2NCIsCiAgICAgICAgICAgICAgICJsb2NhdG9yIiA6ICI1ODo1Ny01ODo2MCIsCiAgICAgICAgICAgICAgICJ2YWx1ZVR5cGUiIDogInt1cm46aGw3LW9yZzplbG0tdHlwZXM6cjF9Qm9vbGVhbiIsCiAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICJ0eXBlIiA6ICJMaXRlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgIH0gXQogICAgICB9CiAgIH0KfQ=="/>
  </content>
</Library>